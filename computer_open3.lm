; =================================================================================
; Name:    CheckOpen3Both
; Purpose: check if human and then computer has an "open 3" (eg. "..XXX."). 
;          "open 3" is a pattern that leads to "open 4" in the next round and then
;          to win in two rounds.
; Input:   none
; Returns: best_score <> #ZERO_SCORE if "open 3" found
;          row, col: coordinates to the free cell of the best "open 3" pattern
; =================================================================================
sub CheckOpen3Both()

   ; computer has a "open 3" ?
   ld mydot, #NOUGHT   
   jsr AccumulateOpen3
   jsr PickBestMove   
   if best_score<>#ZERO_SCORE then exit sub
    
   ; human has a "open 3" ?
   ld mydot, #CROSS   
   jsr AccumulateOpen3
   jsr PickBestMove   
      
end sub

; =======================================================================
; Name:    AccumulateOpen3
; Purpose: builds a map of scores for the "open 3" pattern
; Input:   mydot: the dot to check
; Returns: a map with the score associated to the each free cell
; =======================================================================

sub AccumulateOpen3()

   ; loads the scan pointer with top-left corner
   ld16 scan_ptr, #TOP_LEFT_CORNER
    
   for scan_row=#BOARD_START_ROW to #BOARD_END_ROW    
      for scan_col=#BOARD_START_COL to #BOARD_END_COL       
           ldx #[0*6]+1 : ldy #[0*6]+5 : jsr AccumulateOpen3Direction  ; scans E 
           ldx #[1*6]+1 : ldy #[1*6]+5 : jsr AccumulateOpen3Direction  ; scans SE
           ldx #[2*6]+1 : ldy #[2*6]+5 : jsr AccumulateOpen3Direction  ; scans S
           ldx #[3*6]+1 : ldy #[3*6]+5 : jsr AccumulateOpen3Direction  ; scans SW         
           inc16 scan_ptr
      next
      add16 scan_ptr, #SCREEN_COLS-BOARD_COL_SIZE
   next
	  
end sub
                   
; ================================================================
; Name:    AccumulateOpen3Direction
;
; Purpose: scan along the direction specified and
;          updates the score map if a "open 3" pattern is found

;
; Input:   scan_ptr: screen pos of the cell being checked
;          X,Y index for direction_6[] table containing the scan direction
;          X points to cell[1] because cell[0] is checked directly
;          Y points to cell[5] to make speed up checking
;
; Returns: updated map with scores       
;
;                  012345
; Half three 1:   ".XXX.." 
; Half three 2:   "..XXX."
; Broken three 1: ".X.XX." 
; Broken three 2: ".XX.X."
;
; Note: full three "..XXX.." is not scanned as
; the combination of two half threes matches it
;
; cell[0..5] are checked (6 cells in total)
; first are checked the cell[5], then cell[0] and then the cell[1..4]. 
; Note that there is only one free cell in cell[1..4] which we save in save_y
; Outer cells must be free but only inner free cell is scored
; ================================================================

sub AccumulateOpen3Direction()
   stx save_x
   sty save_y   

   ; verify ending cell[5] is empty
   lda direction_6,y
   tay
   lda (scan_ptr),y 
   if a<#ZERO_SCORE then exit sub             
         
   ; verify starting cell[0] is empty     
   ldy #0
   lda (scan_ptr),y
   if a<#ZERO_SCORE then exit sub       
        
   ; counts how many mydots there are in the cells[1..4] (4 cells)
   ld scan_count, #0    
   ld b,#4
   do
      lda direction_6,x
      tay
      lda (scan_ptr),y
      if a=mydot then
         inc scan_count
      else
         if a<#ZERO_SCORE then exit sub
         sty y_free_cell
      end if      
      inx
      dec b        
   loop until zero      

   ; check for "three" patterns   
   if scan_count<>#3 then exit sub   
    
   ; update the map by increasing the score
   ; the score is different if the free cell is outer or inner

   ; score inner free cell
   ldy y_free_cell
   lda (scan_ptr),y 
   add #1
   sta (scan_ptr),y    
                          
end sub
